.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "CHROMFLOCK" "1" "2023" "Version 0.3.2" "chromflock documentation"
.hy
.SH NAME
.PP
\f[B]chromflock\f[R] is a set of tools to deconvolve bulk Hi-C data into
individual contact indication matrices and generate 3D structures.
.SH SYNOPSIS
.PP
The following commands are available:
.IP \[bu] 2
\f[B]init\f[R] initialize a folder for chromflock, see separate section
below.
.IP \[bu] 2
\f[B]cc2cpm\f[R] convert Hi-C data to a chromflock contact probability
matrix, see separate section below.
.SH INIT
.SS EXAMPLE
.IP
.nf
\f[C]
 $ mkdir 10000structures
 $ cd 10000structures
 $ # create chromflock_gen
 $ chromflock init
 $ # edit settings and point to correct A-file and possible G-file.
 $ nvim chromflock_gen
 # Generate a (linear) batch script with everything to be run
 $ ./chromflock_gen
 # Run everything:
 $ ./chromflock_run
\f[R]
.fi
.SS TIPS
.PP
Use screen or some other program to run chromflock in the background.
This allows you to log out from a (remote) computer while chromflock is
still running.
.PP
chromflock_run outputs some progress information to status.txt while
running.
.SH CC2CPM
.PP
\f[B]cc2cpm\f[R] Can be used to convert a Hi-C matrix into a contact
probability matrix (CPM) suitable for chromflock.
.PP
In this context a HiC-matrix is Hi-C data mapped and binned to a genome
and saved as a dense matrix in 64-bit floating point format (double).
The values of the Hi-C matrix are either raw or normalized counts and
hence the range of the values does not matter to \f[B]cc2cpm\f[R].
.PP
Further downstream the CPM matrix can be read by \f[B]aflock\f[R].
The elements of the CPM are interpreted so that if \f[C]CPM_{ij}=p\f[R],
the probability that bin \f[C]i\f[R] and \f[C]j\f[R] are in contact is
\f[C]p\f[R].
I.e.
if \f[C]p==0\f[R], \f[C]i\f[R] and \f[C]j\f[R] should never be in
contact in any structure.
On the other side if \f[C]p==1\f[R] \f[C]i\f[R] and \f[C]j\f[R] should
be in contact in all structures in the population.
.SS METHOD
.IP \[bu] 2
An (optional) matrix balancing is applied to give equal number of
contacts per bead/bin, i.e.\ a \f[B]Doubly stochastic matrix\f[R].
For this the Sinkhorn\[en]Knopp Algorithm (SKA) is used.
.IP \[bu] 2
The matrix is scaled to reach the specific maximum number of contacts
per bead that was specified with \f[B]\[en]nCont\f[R].
.IP \[bu] 2
The first off-diagonal is set to 1 for all bins within a chromosome.
This is to maintain connection between adjacent beads on the same
chromosome.
.IP \[bu] 2
Chromosome Y (or whatever is labelled as 24) is removed unless
\f[B]\[en]y\f[R] is specified.
.PP
The number of contacts per bead (in average) is important due to
geometric constraints.
For a dense sphere packing
[https://en.wikipedia.org/wiki/Sphere_packing] the number of neighbors
per bead can not exceed 12, and two are already in use for the previous
and next bead (unless the bead is at the beginning or end of a
chromosome).
Since we don\[cq]t expect perfect lattices in our structures the number
of contacts per bead should be strictly below 12.
.PP
Obviously the resolution plays a big role here.
The smaller region that a bead represents, the fewer contacts are found
in Hi-C data.
In other words, unless fine grained simulations are run, it is likely
that some contacts have to be discarded.
.PP
The scaling targets the bead with most contacts, and is hence sensitive
to outliers.
Possibly it might be better to scale to the average number of contacts.
If the Hi-C data is normalized so that each bead has the same number of
contacts, this comment does not apply.
.PP
Normalization with SKA gives each bead the same number of contacts.
That does to some extent hide any differences in accessibility between
regions.
On the other hand it hides differences in compactness.
It is an open question how and if balancing should be used in this
context.
.PP
Please note that there are other, possibly better ways to convert Hi-C
matrices to contact probability matrices.
.SS REQUIRED ARGUMENTS
.TP
\f[B]--hFile file.double\f[R]
The Hi-C matrix, encoded as raw double.
.TP
\f[B]--lFile file.uint8\f[R]
An array with chromosome labels encoded as uint_8.
.TP
\f[B]--nCont n\f[R]
Set the max number of contacts per bead/bin.
.TP
\f[B]--nStruct n\f[R]
The number structures that will be generated.
\f[B]cc2cpm\f[R] needs to know this since it affects which contacts will
be used or not.
For example a contact with probability 0.01 will be enabled only with
100 or more structures.
.TP
\f[B]--aOut file.double\f[R]
Specify the output file name.
.SS OPTIONAL ARGUMENTS
.TP
\f[B]--mode_eq\f[R]
Enable balancing (KR normalization).
This will force each bead to have the same number of contacts.
.TP
\f[B]--y\f[R]
Keep chrY encoded by 24.
Without this argument chromosome Y will be removed.
.TP
\f[B]--usage, --help\f[R]
Show a brief summary of available arguments.
.SH SEE ALSO
.PP
\f[B]mflock\f[R], \f[B]aflock\f[R]
.SH WEB PAGE
.PP
<https://github.com/elgw/chromflock/>
.SH REPORTING BUGS
.PP
Please report bugs at <https://github.com/elgw/chromflock/issues/>
.SH COPYRIGHT
.PP
Copyright \[co] 2022 Erik Wernersson.
License GPLv3+: GNU GPL version 3 or later
<https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH AUTHORS
Erik Wernersson.
